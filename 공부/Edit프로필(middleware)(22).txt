


middleware.js에서 만든 미들웨어를 이용하여 videoRouter에서 
edit, delete, upload를 보호한다.

이런식으로 미들웨어를 이용하여 보호하는 것은
소유자가 아니면 비디오를 수저할 수 없게 만들거나 삭제할 수 없게 만드는 것을
가능하게 한다.

이것을 이용하여 로그인 되어 있는 사람만 video를 업로드 할 수 있게 만드는 작업을 한다.

videoRouter
  .route("/:id([0-9a-f]{24})/edit")
  .all(protectorMiddleware)
  .get(getEdit)
  .post(postEdit);
videoRouter
  .route("/:id([0-9a-f]{24})/delete")
  .all(protectorMiddleware)
  .get(deleteVideo);
videoRouter
  .route("/upload")
  .all(protectorMiddleware)
  .get(getUpload)
  .post(postUpload);


중간에   .all(protectorMiddleware) 을 추가해 주어 보호한다.

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

form에서 받아온 것들을 이용하여 postedit을 만드는 과정

ES6 문법 중 하나

const i = req.session.user.id
const n = req.body.name
const e = req.body.email
const u = req.body.username
const l = req.body.location

를 아래와 같이 가독성이 좋게 만들 수 있다.

export const postEdit = async (req, res) => {
  const {
    session: {
      user: { _id },
    },
    body: { name, email, username, location },
  } = req;


그리고 이렇게 설정해둔 것을 User데이터베이스에 전달해 준다.

  await User.findByIdAndUpdate(_id, {
    name,
    email,
    username,
    location,
  });

로 

그 다음 랜더링해 준다.

return res.render("edit-profile");


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

DB에서의 업데이트가 프론트 엔드에 반영되지 않는다.
프론트엔드는 session으로부터 정보를 얻기 때문에.
session은 로그인 했을때만 정보를 받아오기때문에 그 이후에 업데이트 되거나 변한
부분은 못 받아오고 로그인 했을 때의 정보만 남아있다.

그래서 우리는 비디오가 수정될때 session을 업데이트 해줘야 한다.


(session 에 user object를 넣었는데 , user object를 업데이트 했으면 session도
업데이트 해줘야 한다.)

session을 업데이트 하는 방식에는 두 가지고 있다.

1. 직접 업데이트 하는 거.
  req.session.user = {
    ...req.session.user,
    name,
    email,
    username,
    location,
  };
  return res.redirect("/users/edit");

...req.session.user 은 req.session.user안에 있는 내용을 전해주는 것이다.
그 안의 내용을 밖으로 꺼내준다. 가장 첫 줄에 적고 그 다음 name,email...을 업데이트해준다.



2. updatedUser을 만드는 것

https://mongoosejs.com/docs/api/model.html#model_Model.findByIdAndUpdate
에서 사용법을 본다

기본적으로 findByIdAndUpdate는 update 되기 전의 데이터를 return 해주고 
new:true를 설정해 주면 findByIdAndUpdate가 업데이트된 데이터를 return 해준다.

  const updatedUser = await User.findByIdAndUpdate(
    _id,
    {
      name,
      email,
      username,
      location,
    },
    { new: true }
  );
  req.session.user = updateUser;

로 바꾸어 준다. 
--> 가독성이 좋다

이제 예외 처리를 해줘야 한다.
이름이나 email이 다른 회원의 것과 같으면 바꾸지 못하도록 설정하는 작업을 한다.

userController에서 exists부분과 같다.
-> body의 username,email이 session.user에 있는 Username,email이랑 같은지 확인
해 보고 사용자가 변경하고 싶어하는 지 알아낸다.

즉, 사용자가 변경하기를 누르면 session.user에 있는 username과 email의 정보가 변하는데
그 순간의 body의 username,email과 같은지를 확인하는 방식이다.




let searchParam = [];

  if (sessionEmail !== email) {
    searchParam.push({ email });
  }

  if (sessionUsername !== username) {
    searchParam.push({ username });
  }

  if (searchParam.length > 0) {
    const foundUser = await User.findOne({ $or: searchParam });
    if (foundUser && foundUser._id.toString() !== _id) {
      return res.status(400).render("edit-profile", {
        pageTitle: "Edit Profile",
        errorMessage: "This username/email is already taken.",
      });
    }
  }

로 코딩할 수 있다.












































