

우선
back end에 데이터를 어떻게 보내는지 먼저 알아야 한다.

우리는 지금까지 라우터에서 get으로만 사용해 왔다.

하지만 post 사용법을 익혀야 한다.



app.post();

해야할 것.
1. 가짜 database에 있는 것을 나열.
2. 유저가 하나의 비디오를 볼 수 있도록 한다.
=> see컨트롤러를 바꾸면 된다.
3. 비디오를 업로드 할 수 있도록 한다.


-----------------------------------------

video이름을 클릭하면 동영상을 볼 수 있도록 하고싶다.

--> see로 넘어가도록 한다.

1.

video.pug에서
 a(href=`/videos/${video.id}`)=video.title
를 추가해 준다.

2.
const id = req.params.id;
를 통해 id를 변수로 만들어 준다.
const {id} = req.params로 사용해도 된다.

그리고 비디오를 찾아줄 변수를 만들어 넣어준다.
const video = videos[id - 1];

그리고 watch 템플릿을 랜더링해준다.
return res.render("watch", { pageTitle: `Watch ${video.title}` });

지금까지 배운 내용들을 응용해서 더 디테일한 페이지를 만들어 준다.



------------------------------------------

비디오 수정하는 페이지 만들기


 &rarr
: 오른쪽 화살표


a(href="edit") Edit Video &rarr;
으로만 설정해도 edit으로 간다.

relative url
-> /를 안 붙이면 현재 파일 위치 안에서 상대적으로 움직인다.

absolute url
-> /를 붙여서 사용하면 거기로 보내준다.(절대경로)


edit video

input 태그 안에 required => 비어있으면 오류메시지 뜬다.


원래라면 form안에 action을 통해 어디로 갈 지 url을 정해야 한다.
거기부분에 우리는 method를 넣을것이다(POST)
form(method="POST")

action을 사용하면 get으로 얻어진 url로 이동하게 된다.

하지만 우리는 post를 이용할 것이다!

---------------------------------------------

post와 get의 차이점.

get은
input에 이름을 줘야 한다.(이동한다.!)
기본적으로 method는 get이다.
get은 무엇인가를 검색할때 사용한다.

post방식은 파일을 보내거나 database에 있는 값을 바꾸는 뭔가를
보낼 때 사용한다

get은 비디오를 검색할 때 사용

post는 웹사이트 로그인, 데이터베이스 값 바꾸기, 파일보내기ㅣ에 사용


라우터js파일에 get사용하는 곳 아래에 추가해 준다.
videoRouter.get("/:id(\\d+)/edit", getEdit);
videoRouter.post("/:id(\\d+)/edit", postEdit);

컨트롤러js파일에 추가.
export const postEdit = () => {};


결국 form태그 안에있는 method는 back-end와 정보 전송에
관한 방식이다.

------------------------------------------

post는 get과 구조는 같다.url, function식으로.
하지만 작동하는 function이 다르다.


라우터에서 
videoRouter.get("/:id(\\d+)/edit", getEdit);
videoRouter.post("/:id(\\d+)/edit", postEdit);
을 더 짧게 줄이는 방법..

videoRouter.route("/:id(\\d+)/edit").get(getEdit).post(postEdit);
으로 사용할 수 있다.



컨트롤러로 넘어와서.
return res.redirect();

redirect()메소드

: 브라우저가 redirect(자동으로 이동)하도록 하는 것이다.

save버튼을 누루면  watch페이지로 넘어갈 수 있도록 하기 위해 사용


1. save를 누르면 
postEdit에서는 id를 얻어와 /videos/id로 redirect해 줘야 한다.

2. 입력되는 value를 얻어야 한다.
input 안에 name을 주고
console.log(req.body)으로 어떤 값을 가져오는 지 확인 하는데 오류...

오류를 처리해 주기 위해 express function의 method를 사용해야한다.
express.urlencoded()
여러가지가 있는데 그 중 extended를 사용한다.
-> body에 있는 정보들을 보기 좋게 형식을 갖춰주는 일을 한다.

이것을 이용하여 form의 데이터를 받아온다.

server.js에 appuse(logger);아래에

app.use(express.urlencoded({ extended: true }));
를 추가해 준다.

--> express application이 form의 value들을 이해할 수 있도록 하고,
	쓸 수 있는 자바스크립트로 변형시켜준다.


console.log(req.body);를 해보면
{ title: 'wow' } 가 나온다.

title은 input에서 설정해준 name이고 wow는 입력 된 value다.



const { title } = req.body;을 이용하여 값을 활용한다.

































