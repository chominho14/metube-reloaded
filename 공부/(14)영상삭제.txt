


영상 삭제


1. watch페이지로 가서 버튼을 만들어 준다.


2. 이 function의 라우터와 컨트롤러를 만들어 주어야 한다.

컨트롤러에서 
export const deleteVideo = async (req, res) => {
  const { id } = req.params;
  await Video.findByIdAndDelete(id);
  return res.redirect("/");
};
라우터에서 
videoRouter.route("/:id([0-9a-f]{24})/delete").get(getDelete);

추가.

Model.findByIdAndDelete() 사용한다.


Model.findOneAndDelete()
Model.findOneAndRemove()

이 둘은 정말 약간의 차이가 있는데 대부분의 상황에서 타당한 이유가 없는 한 delete를 사용하라고 되어 있음.

https://www.zerocho.com/category/MongoDB/post/579ecb1fc097d015000404dd

여기 글을 읽어보니 몽고 db는 롤백이 안되서 remove를 하면 다시 되돌릴 수 없기에 remove보다 delete를 사용하라고 권장하는듯

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

영상 검색

영상들을 어떻게 정렬할지 저알 수도 있다.
sort()사용

.sort({createAt:"desc"})
 asc, desc로 오름차순 내림차순,
식으로 사용할 수 있다.


컨트롤러에

export const search = (req, res) => {
  return res.render("search");
};


글로벌라우터에

globalRouter.get("/search",search);

추가

home pug파일에서
li 
     a(href="/search") Search
추가.

search.pug을 만든 뒤

작업해주기.

비디오 컨트롤러에서

export const search = (req, res) => {
  return res.render("search", {pageTitle:"Search"});
};

pageTitle넣어주기.


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

url에서 정보들을 어떻게 빼내는가를 배운다.

검색하는 것을 컨트롤러 search에서 가져와야 한다.

console.log(req.query)로 찾아보기

keyword에서 그 정보를 받는다.

이제 실제 비디오를 제거해 보자.

  const { keyword } = req.query;
  if (keyword) {
    const videos = await Video.find({
      title: keyword,
    });
    return res.render("search", { pageTitle: "Search", videos });
  }

로 코드를 짤 수 있다.

export const search = async(req, res) => {
  const { keyword } = req.query;
  let videos = [];
  if (keyword) {
    videos = await Video.find({
      title: keyword,
    });
  }
  return res.render("search", { pageTitle: "Search", videos });
};

이런식으로 코드를 짜면
바깥 return에서도 videos를 사용할 수 있다.

if문 안에서는 단순히 videos를 update해 준다.


단어를 정확히 입력하는 것보다 비슷한 것들을 검색해주는 기능을 설정
--> regular expression.

뒤에 $를 붙이면 저것으로 끝나는 단어
^를 붙이면 그것으로 시작하는 단어.

reqex라ㄹ는 연산자를 사용해야 한다.



export const search = async (req, res) => {
  const { keyword } = req.query;
  let videos = [];
  if (keyword) {
    videos = await Video.find({
      title: {
        $regex: new RegExp(keyword, "i"),
      },
    });
    console.log(videos);
  }
  return res.render("search", { pageTitle: "Search", videos });
};

regex안에 들어있는 i는 대문자 소문자 둘 다 검색해주는 것을 한다.














