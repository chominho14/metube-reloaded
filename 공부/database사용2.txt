

req.body : form에 있는 value의 javascript representation이다.

이것은 middleware를 설정해야만 가능한 일이다.

app.use(express.urlencoded({ extended: true }));


다시 연습하기

유저가 form을 get하고, 그 form을 post하면 그게 controller를 발생
유저들이 redirect, 페이지에서 무엇을 보여준다.

동영상을 upload하는 것을 만들어 보자

1. 컨트롤러에 추가해 준다.
export const getUpload = (req, res) => {
  return res.render("asdfasdf");
};

export const postUpload = (req, res) => {

  return res.redirect("/")/
};

2. 라우터에 추가해 준다.

videoRouter.route("/upload").get(getUpload).post(postUpload);
import에도 함수명 추가

3. /upload로 가는 클릭이 가능한 링크를 만들어야 한다.

base.pug에 추가해 준다.
	nav 
                ul 
                    li 
                        a(href="/videos/upload") Upload Video


4. 그러면 에러가 발생한다. src에 upload가 없다.

upload.pug파일을 만들어 준다.

컨트롤러에 가서 pageTitle을 준다.

5.  
form(method="POST")
        input(placeholder="Title", required, type="text")
        input(type="submit" ,value="Upload Video")
로 폼을 만들어 준다.




우리는 form태그 안에서 action을 해줄 필요 없다.
get과 post를 모두 같은 upload의 url에서 해결해 주어서!


우리는 input에서 req.body에서 data를 받아올 수 있다.
console.log(req.body)로 확인해 보면 비어있다.
--> 이유는 이름을 설정해 주지 않았기 때문에.


export const postUpload = (req, res) => {
  const { title } = req.body;
  const newVideo = {
    title,
    rating: 0,
    comments: 0,
    createdAt: "just now",
    views: 0,
    id: videos.length + 1,
  };
  videos.push(newVideo);
  return res.redirect("/");
};

이런식으로 간단하게 넣어볼 수 있다.



-----------------------------------------

결국,

form, get, post, 값 처리, redirect
대부분 redirect처리한다.
render도 한다.

과정 정리!!!!!!!

컨트롤러를 만들고 그 컨트롤러가 pug 템플릿을 render하고
템플릿은 form을 가질 수 있다. 그 form은 post method를 
가지고 있다. 즉, 그 from 의 데이터를 다른 url에 보내줄 수 있고
그 url은 post method와 함께 router에 등록돼 있을 것이다.
그러면 post컨트롤러가 실행되고 필요한 것을 redirect하게 된다.






------------------------------------------

mongodb, mongoose

mongoose를 이용하여 자바스크립트에서 mongodb와 상호작용 할 것이다.


mongoDB의 장점은 document-based(문서 기반)이라는 점이다.

--> 보통 다른 db는 sql기반이다(행 기반)

몽고디비는 database도 object로 생각한다.

--> 몽고디비에서 저장하는 것들은 JSON-like-document이다.

pakage.json을 저장하는 방식이랑 비슷하다.

게다가 몽고디비는 document 내부를 검색할 수 있도록 해준다.

우리는 그 document를 이용해 수정, 추가, 삭제 등등을 진행할 수 있다.


mongoose 는 우리가 javascript를 이용하여 mongodb를 컨트롤
할 수 있게 해준다.

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

윈도우 파워쉘에서

mongod 명령어를 통해 실행되고 있는지 확인

후 

mongo 를 통해 접속

exit 으로 나올 수 있다.

비쥬얼스튜디오 코드로 돌아와서

src아래 db.js파일을 만들어 준다.

mongo database에 연결한다.!

파워쉘에서 mongo를 실행한 뒤 url을 복사해 준다.

import mongoose from "mongoose";


mongoose.connect("mongodb://127.0.0.1:27017/데이터베이스 이름")

로 만들어 준다.

이제 db.js를 server.js와 연결시켜 줘야 한다.

server.js에 import "./db";를 임포트함으로써 연결된다.

1.
mongoose.connect("mongodb://127.0.0.1:27017/wetube", {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});
를 해준다.

아직 connect를 했을 뿐 만들어진 것은 아니다.
connect를 원한다고 말했을 뿐이다.

2. 연결의 여부를 console.log로 볼 수 있게 만들어 준다.


const db = mongoose.connection;

db.on("error", (error) => console.log("DB Error",error));

로 에러를 알 수 있다.

또한 once()메소드를 사용하여 확인할 수 있다.
once()함수는 한 번만 사용이 가능하다
on()은 많이 사용 가능!

const handelOpen = () => console.log("Connected to DB");
db.once("open", handelOpen);
로 사용
//open은 db가 열리는 것이므로 한 번만 일어난다.

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

db.on("error", (error) => console.log("DB Error",error));
이 문장은
아래의 문장으로 보기 쉽게 바꿀 수 있다.
const handleError =  (error) => console.log("DB Error", error));
db.on("error", handleError);













