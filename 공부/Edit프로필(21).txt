

프로필 바꾸기, form을 사용하는 연습, 아바타파일

유저 라우터에 있는 edit은 get과 post가 필요하다.

따라서 getEdit, postEdit으로 만들어 준다.

export const getEdit = (req, res) => {
  return res.render("edit-porfile", { pageTitle: "Edit Profile" });
};

export const postEdit = (req, res) => {
  return res.render("edit-profile");
};
로 만든다.




유저 컨트롤러에 import를 해주고

userRouter.route("/edit").get(getEdit).post(postEdit);

로 만든다.

템플릿을 만들어 준다.

우선 base.pug를 수정, 
loggedIn 은 localsMiddleware에서 온 변수이다.
(res.locals.~= ~ 로 설정되어있는 것은 pug어디든 사용 가능)

이제 edit-profile.pug를 만들어 작업해준다.

form을 만들고 POST로 적용시킨다.

우리는 editprofile에서 name, email, username, location을 수정할 수 
있게 만들 것이다.
(비밀번호 변경은 따로 만들 것이다.)

extends base.pug

block content 
    form(method="POST")
        input(placeholder="Name",name="name", type="text", required)
        input(placeholder="Email",name="email", type="email", required)
        input(placeholder="Username",name="username", type="text", required)
        input(placeholder="Location",name="location", type="text", required)
        input(type="submit", value="Update Profile")
        

우리는 수정하기 전에 우리의 프로필을 먼저 볼 수 있어야 한다.
--> edit-profile템플릿으로 user object를 가져온다.

원래는 컨트롤러에서 user: req.session.user로 받아와야 하지만
middlewares.js에서 작업해 놓은 res.locals.loggedInUser을 이용하여
pug파일에서 바로 사용할 수 있다.(자동적으로 views에 import 됨)

extends base.pug

block content 
    form(method="POST")
        input(placeholder="Name",name="name", type="text", required, value=loggedInUser.name)
        input(placeholder="Email",name="email", type="email", required, value=loggedInUser.email)
        input(placeholder="Username",name="username", type="text", required, value=loggedInUser.username)
        input(placeholder="Location",name="location", type="text", required, value=loggedInUser.location)
        input(type="submit", value="Update Profile")
        

로 사용 가능

이제 강제로 /user/edit으로 url을 타고 들어오는 사람들을 위해 막아줘야 한다.
--> 안할시 오류가 난다.
오류 1. loggedInUser에 접근하려는데 로그인이 되어있지 않으면 생기는 에러
오류 2. 로그인 돼 있지 않은 사람들은 올 수 없게 만들어야 한다.

url이 작동하지 않고 redirect 될 수 있게 만든다.
--> route를 보호하는 middleware가 필요하다.


오류1 해결 방법
localsmiddleware에서
  res.locals.loggedInUser = req.session.user || {};
로 req.session.user가 비어있어도 갈 수 있도록 만든다.'

오류2 해결 방법
protectorMiddleware를 만든다.

export const protectorMiddleware = (req, res, next) => {
  if (req.session.loggedIn) {
    next();
  } else {
    return res.redirect("/login");
  }
};

여기서 사용자가 로그인 돼 있지 않을 걸 확인하면, 로그인 페이지로 redirect
시켜 준다.


그리고 로그인 돼 있지 않은 사람들만 접근 할 수 있게하는 middleware도 만들어
준다.

export const publicOnlyMiddleware = (req, res, next) => {
  if (!req.session.loggedIn) {
    return next();
  } else {
    return res.redirect("/");
  }
};

로

정리하면 protectorMiddleware 에서는 user가 loggedIn 돼 있다면,
요청을 계속하게 하고 loggedIn이 되어 있지 않으면, 로그인 페이지로 
redirect 해준다.

publicOnlyMiddleware 에서는 user가 loggedIn 돼 있지 않으면 요청을
계속하게 하고 loggedIn돼 있으면 / 로 이동시킨다.

이것을 적용시키면, user라우터에서 로그인 되어 있는 사람들만 로그아웃이 가능하도록
해 주어야 한다. (protectorMiddleware를 추가)

-->
import {protectorMiddleware,publicOnlyMiddleware} from "../middlewares";

const userRouter = express.Router();

userRouter.get("/logout", protectorMiddleware, logout);
userRouter.route("/edit").all(protectorMiddleware).get(getEdit).post(postEdit);
userRouter.get("/github/start", publicOnlyMiddleware, startGithubLogin);
userRouter.get("/github/finish", publicOnlyMiddleware, finishGithubLogin);
userRouter.get(":id", see);

export default userRouter;
로 바꾸어 준다.

이제 rootrouter에도 적용시켜 준다.


const rootRouter = express.Router();

rootRouter.get("/", home);
rootRouter.route("/join").all(publicOnlyMiddleware).get(getJoin).post(postJoin);
rootRouter
  .route("/login")
  .all(publicOnlyMiddleware)
  .get(getLogin)
  .post(postLogin);
rootRouter.get("/search", search);

export default rootRouter;



이 middleware를 video컨트롤러에도 추가한다.

비디오 라우터에도 만든 미들웨어로 보호해 준다.
이렇게 하는 이유는, 나중에 video model과 user model을 연결 할 것이다.

그래서 우리는 웹사이트에 계정이 있고, 로그인 되어있는 사람만 video를 업로드 
할 수 있게 해 준다.

videoRouter.get("/:id([0-9a-f]{24})", watch);
videoRouter
  .route("/:id([0-9a-f]{24})/edit")
  .all(protectorMiddleware)
  .get(getEdit)
  .post(postEdit);
videoRouter
  .route("/:id([0-9a-f]{24})/delete")
  .all(protectorMiddleware)
  .get(deleteVideo);
videoRouter
  .route("/upload")
  .all(protectorMiddleware)
  .get(getUpload)
  .post(postUpload);


그리고 upload비디오는 로그인 된 사람들만 볼 수 있는 거니깐 바꿔준다.
--> base.pug에서 수정



이제 유저컨트롤러에서 postEdit 작업을 시작한다.

우선 edit-profile에서 받아온 name,email,username,location을 수정한다.

현재 로그인 되어있는 유저를 어떻게 알 수 있을까?
--> request object에서 알 수 있다.

req.session.user 을 이용.

export const postEdit = async (req, res) => {
  const {
    session: {
      user: { id },
    },
  } = req;
  const { name, email, username, location } = req.body;
  await User.findByIdAndUpdate();
  return res.render("edit-profile");
};




  const {
    session: {
      user: { id },
    },
  } = req;

는 

const id = req.session.user.id
랑 같다.


이것을 이용하면

  const {
    session: {
      user: { id },
    },
    body: { name, email, username, password },
  } = req;

로 한번에 사용 가능하다(ES6 문법)

findByIdAndUpdate()의 함수는
두 개의 argument를 받는데, 첫째는 id이다.
두번째는 Updatequery이다.

--> 유저가 id가 없어 오류가 뜰 것이다.

middlewares.js에서 console.log로 확인해 볼 수 있다.
확인하면 우리가 _id로 설정해 둔 것을 확인할 수 있다.

그래도 에러!

loggedInUser가 언제 생성된건지 생각해본다.
middlewares에서 loggedInUser를 req.session.user이라고 정의하고 있다.

그럼 req.session.user은 어디서 생성될까
--> 로그인 할 때다.

유저컨틀로러에서 req.session.loggedIn=true;
req.session.user = user;
로 입려해 준다.

DB에서는 user를 업데이트햇는데, session은 DB와 연결돼 있지 않아.










































