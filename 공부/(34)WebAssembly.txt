

Web Assembly

FFmpeg 를 가지고 우리 비디오를 webm에서 mp4로 변환할 것이다.
그리고 비디오의 썸네일도 추출할 것이다.

->비디오 오디오 등등을 다룰 수 있는 소프트웨어
https://www.npmjs.com/package/@ffmpeg/ffmpeg

백엔드에서 실행해야한다.

영상을 원래 webm에서 mp4로 바꾸는데 돈을 지불해야한다.
하지만 우리는 다른 방식으로 바꿔보자.

이것을 고치기 위해 웹어셈블리를 사용한다.

원레 프론트엔드에선 html, css, javascript만 사용할 수 ㅣㅇㅆ지만
웹 어셈블리는 c나 go, rust등 다른 언어를 실행할 수 있게 만들어 준다.

우리는 ffmpeg.wasm을 사용한다.

npm install @ffmpeg/ffmpeg @ffmpeg/core


우리는 부라우저로부터 URL 을 받고 있다는 것을 잊으면 안 된다.
event.data에는 binary data가 있는데 우리는 이 binary data에 접근할 수 잇어야 ㅎ나다.

npm install @ffmpeg/ffmpepg@0.9.7 @ffmpeg/core@0.8.5

로 다운로드

import { createFFmpeg, fetchFile } from "@ffmpeg/ffmpeg";

  const ffmpeg = createFFmpeg({log:true});
  await ffmpeg.load();

이런식으로 사용한다.
소프트웨어가 무거울 수 있기때문에 await을 사용해서 기다려줘야 한다.

우리는 ffmpeg 파일의 세계에서 파일을 만들어야한다.

  ffmpeg.FS("writeFile", "파일명", binary.data함수)
은 가상의 세계에 파일을 생성해준다.


-->  ffmpeg.FS("writeFile", "recording.webm", await fetchFile(videoFile));

recording.webm input을 받아서 output.mp4로 변환해주는 명령어를 사용하는 코드
그리고 초당 60프레임으로 인코딩해준다.
-->   await ffmpeg.run("-i", "recording.webm", "-r", "60", "ouput.mp4");


에러 해결 
낮은 버젼,
server.js에 set아래

app.use((req, res, next) => {
  res.header("Cross-Origin-Embedder-Policy", "require-corp");
  res.header("Cross-Origin-Opener-Policy", "same-origin");
  next();
});

추가
































