서버 만들기!

express 설계하기

express application을 먼저 만들어 줘야 한다.

import express from "express";

const app = express();


이 app이 listen해야 한다.
서버는 항상 켜져있다. 
서버는 request를 listen하고 있다.
--> 계속 주목하고 있다.
--> 서버와 상호작용하는 모든 행동을 말한다.



const handleListening = () => console.log("Server listening on port 4000.");

app.listen(4000, handleListening);

로 리슨할 수 있다 4000포트로

GET

Get은 홈페이지에 요청하는 것이다(~을 가져다줘)

http requests의 작덩법.

app을 만들고 -> app을 설정한 다음 -> 외부에 개방

app.get("/" , )
이것은 app.addEventListener("click", ~~) 은 비슷하다.
get은 ""안에 있는 URL좀 가져다 줘!

get으로 가져온 함수에는 request 와 response가 들어있다.

end()를 사용하면 서버(request)를 멈출 수 있다.


https://expressjs.com/en/4x/api.html#req
에서 보기.


Middleware : handle들을 말한다. = controller

app.use() : global middleware을 만들어 준다.
	어느 url이든 작동할 수 있는.

const gossipmiddleware =(req, res, next) =>{
    console.log("dffef");
    next();
};

app.use(gossipmiddleware);
식으로 사용이 가능하다.

순서가 중요하다.
use가 먼저 오고 url을 get해야 된다.

리턴을 하면 끝이 난다.

------------------------------------------

1. middleware를 use하는 게 먼저
2. URL의 get이 와야 한다.

app.use(gossipmiddleware);
app.get("/",handleHome );
순서

3. 모든 route에서 app.use(gossipmiddleware)을 사용하는 것이다.

4. 

---------------------------------------

1. application이 있고
2. request가 오면
3. express는 모든 걸 위에서 아래 순으로 실행시킨다.
4. express는 우선 request를 받으면 app.use에 있는
	gossipmiddleware실행 시킨다.
5. 그 안에 있는 코드들을 실행시키고 (if문을 이용하여 return을 해 끝낼 수 있다= 다음 함수 호출을 막는다)
			-->응용하면 된다.
6. 그리고 next()가 실행되고 handleHome이 실행된다.

+ middleware가 많아 지면~
(middleware을 만들어 로그인을 막거나 로그인 시 풀어주는 응용까지 가능)

7. 그리고 로그인이 된다면 받아들일 수 있는 handleProtected를 만들어 준다.
(거기엔 리턴값을 넣어 프로그램의 끝을 보여준다.)


--------------------------------------

지금까지 배운것들 정리!!
모든건 package.json에서 시작 node.js 정보들을 넣어놓은 것.

scripts
scripts entry를 생성하고 안에 scripts를 넣어두면
npm run을 사용할 수 있다.
scripts를 한 곳에 모아서 실행할 수 있게 만들어 주는 역할을 한다.
여러개의 script들을 모아서 순서대로 실행시켜 준다.

디팬던시스.
프로젝트가 돌아가기 위해 필요한 pakage들
express는 node_module에 들어가 있다.

데브디팬던시스
디팬던시스와 차이. 
겉으로의 차이는 서로 분리 돼 있다.















