

영상 조회수 기록하는 것 만들기

템플릿을 렌더링 하지 않는 views를 만든다.
이런 걸 api views라고 한다.

백엔드에서 템플릿을 랜더링하지 않는다.

ssr방식을 사용한다.

API는 프론트엔드와 백엔드가 서버를 통해 통신하는 방법을 말한다.

라우터 작업을 한다.

apiRouter.js 만들기

import express from "express";
import { registerView } from "../controllers/videoController";

const apiRouter = express.Router();

apiRouter.post("/videos/:id([0-9a-f]{24})/view", registerView);

export default apiRouter;

로 라우터를 만든 뒤

컨트롤러에서


export const registerView = async (req, res) => {
  const { id } = req.params;
  const video = await Video.findById(id);
  if (!video) {
    return res.status(404);
  }
  video.meta.views = video.meta.views + 1;
  await video.save();
  return res.status(200);
};

로 작업한다.
라우터에서 id를 받아온 뒤 url에서 가져온 id로 video를 찾은 다음
비디오가 존재하지 않으면 404,
존재하면 video.meta.view에 +1 한 후 저장한다.

이제 이 url을 프론트엔드에서 호출해야한다.


*****
이동없이 url을 호출할 수 있는 방법
동적인 것.

pug를 사용하면 정적이라 url을 새로고쳐야 한다.
하지만 자바스크립트로 동적으로 만들어 보자.

videoPlyer.js(프론트엔드 자바스크립트) 에서 url을 불러올 것이다.

이벤트를 추가한다.
-> 유저가 비디오 시청을 끝냈을 때 생기는 이벤트
video.addEventListener("ended", handleEnded);
로

이제 fetch를 이용한다.

HTML element에 커스텀 데이터를 어떻게 저장하는지 알아보자.
-> pug한테 video id 정보를 html의 어딘가에 저장하라고 알려준다.
--> Data attribute를 사용한다.

ended event
https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/ended_event

HTMLMediaElement
https://developer.mozilla.org/ko/docs/Web/API/HTMLMediaElement

Data Attributes
https://developer.mozilla.org/ko/docs/Learn/HTML/Howto/Use_data_attributes


watch.pug 에서 작업
div#videoContainer(data-videoId=video._id)

videoPlayer.js에서
console.log(videoContainer.dataset);
로 확인 가능하다.

const handleEnded = () => {
  const { id } = videoContainer.dataset;
  fetch(`/api/videos/${id}/view`);
};

Fetch는 GET요청을 보내게 되는 것이다.
하지만 우리는 post요청을 받도록 만들었다.
따라서

const handleEnded = () => {
  const { id } = videoContainer.dataset;
  fetch(`/api/videos/${id}/view`, {
    method: "POST",
  });
};

로 수정해준다.













































