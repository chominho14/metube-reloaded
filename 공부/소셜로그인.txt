
웹사이트에 소셜 로그인 구현하기.

OAuth

다른 sns로그인이랑 흐름은 비슷하다.


1. 사용자를 깃헙으로 보낸다.
사용자들은 깃헙 신원을 요청하기 위해 redirect됩니다.

2. 우리에게 정보를 공유하는 것을 승인한다. 그러면 깃헙은 사용자를
	우리 웹사이트로 돌려보낸다.


3. 깃헙은 사용자를 token과 함께 redirect한다.

token으로 사용자를 받아온다.'


우선 github application이 있어야 한다.

깃허브 OAuth Apps
https://github.com/settings/developers

깃허브 OAuth Apps 공식문서
https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps


시간절약
https://github.com/login/oauth/authorize
https://github.com/login/oauth/authorize?client_id=입력값
https://github.com/login/oauth/authorize?client_id=입력값&allow_signup=false


login.pug에서 설정해 준다.

a(href="https://github.com/login/oauth/authorize") Continue with Github &rarr;

URL에 client ID를 보내줘야 한다.


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ


https://docs.github.com/en/developers/apps/building-oauth-apps/scopes-for-oauth-apps

scope : 유저에게서 얼마나 많이 정보를 읽어내고 어떤 정보를 가져올 것인가에 대한 것.


우리는 read : user
	user : email 을 사용할 것이다.


a(href="https://github.com/login/oauth/authorize?client_id=f52f11bdcd54ee6c4d14&allow_signup=false&scope=user:email") Continue with Github &rarr;


하지만 이 url은 너무 길고 매번 쓸때마다 복사 붙여넣기를 해야 한다.
그래서 한군데애 모아두자.

유저 라우터에
userRouter.get("/github/start", startGithubLogin);
추가

유저 컨트롤러에 startHithubLogin 추가


 
export const startGithubLogin = (req, res) => {
  const baseUrl = "https://github.com/login/oauth/authorize";
  const config = {
    clientId: "9baa357fd395998ea01e",
    allow_signup: false,
    scope: "read:user user:email",
  };
  const params = new URLSearchParams(config).toString();
  const finalUrl = `${baseUrl}?${params}`;
  return res.redirect(finalUrl);
};

우린 
UrlSearchParams라 하는 utility를 사용할 것이다.


이제 우리는 Authorize를 클릭할 수 있게 해야한다.


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ


2단계 : 유저가 깃허브를 통해서 우리 웹사이트로 다시 redirect될것이다.

깃허브에서 받은 토큰을 Access 토큰으로 바꿔주어야 한다.
--> 깃허브에서 준 코드를 Access 토큰으로 바꾸자.

client_id는 많이 사용되므로 .env파일에 넣어 둔다.

.env파일에는 안 보여지게 하는 코드도 그렇지만 모든 공간에서 사용하려는
문자열도 넣어 두면 편하다.

client_id: process.env.GH_CLIENT

로 변경.

이제 다음 단계로 client_secret이 필요햐다.
이 값은 백엔드에만 존재해야 되는 secret이다.

이제 client_secret을 받아왔으므로 새로운 config를 만든다.

export const finishGithubLogin = (req, res) => {
  const baseUrl = "https://github.com/login/oauth/access_token";
  const config = {
    client_id: process.env.GH_CLIENT,
    client_secret: process.env.GH_SECRET,
    code: req.query.code,
  };
  const params = new URLSearchParams(consfig).toString();
  const finalUrl = `${baseUrl}?${params}`;
};

이제 이것들을 다시 URL로 넣어주어야 한다.
URLSearchParams()

fetch를 사용할 것이다.

--> 무언가를 하고 싶거나 무언가를 가져오고 싶을 때 사용한다.


export const finishGithubLogin = async(req, res) => {
  const baseUrl = "https://github.com/login/oauth/access_token";
  const config = {
    client_id: process.env.GH_CLIENT,
    client_secret: process.env.GH_SECRET,
    code: req.query.code,
  };
  const params = new URLSearchParams(config).toString();
  const finalUrl = `${baseUrl}?${params}`;
  const data = await fetch(finalUrl,{
    method:"POST"
  })
  const json = await data.json();
  console.log(json)
};

로 패치를 사용해 finalUrl에 POST 요청을 보내고 있다.
finalUrl에는 client_id, client_secret, code를 가지고 있다.

그리고 JSON으로 data들을 받는다.

await fetch로 가져오는 것 보다 then을 사용하는 것이 익술할 것이다.
하지만 await fetch를 한 다음에 JSON을 가져오는 것이 더 간결하다.

code의 유효기간은 10분이다.

--> 에러 ( fetch가 정의되지 않았습니다.)
fetch는 브라우저에서만 사용 가능하다.

fetch기능은 nodejs에 포함되어 있지 않다.

자바스크립트와 nodejs백엔드와 함수가 다른 것이 있다.


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ


참고(
[2021.09.01] [ERR_REQUIRE_ESM] Error로 문제를 겪으시는 분들 보세요!
오늘 node-fetch가 Version 3를 내면서
npm install node-fetch를 하면, version 3.0.0이 설치됩니다.
수업에서 사용하는 버전은 2.6.1이구요
Version 3으로 설치되어 실행시키면, 아마 [ERR_REQUIRE_ESM] 가 뜰겁니다.
이것은 node-fetch가 Version 3부터는 ESM-only Module이어서 그런 것 같습니다. 공식문서에서는 CSM(CommonJS)를 쓰는 사람들은 버전 2로 쓸 것을 권장한다고 합니다. 이미 설치하셨으면, npm uninstall node-fetch로 제거하시고
npm install node-fetch@2.6.1 명령어 실행하시면 강의처럼 잘 굴러갑니다.
참고바랍니다. 아마 오늘 이후로 들으시는 분들 강의내용 그대로 따라하시면 모두 겪을 문제같아서 공유합니다
)


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

이제 fetch를 백엔드에서 어떻게 사용하는지 알아보자.

node-fetch라는 패키지를 사용할 것이다.

npm install node-fetch@2.6.1

유저 컨트롤러에
import fetch from "node-fetch";
추가


export const finishGithubLogin = async (req, res) => {
  const baseUrl = "https://github.com/login/oauth/access_token";
  const config = {
    client_id: process.env.GH_CLIENT,
    client_secret: process.env.GH_SECRET,
    code: req.query.code,
  };
  const params = new URLSearchParams(config).toString();
  const finalUrl = `${baseUrl}?${params}`;
  const data = await fetch(finalUrl, {
    method: "POST",
    headers: {
      Accept: "application/json",
    },
  });
  const json = await data.json();
  console.log(json);
  res.send(JSON.stringify(json));
};


로 사용 가능

이제 3단계로 넘어 간다.
get url로 넘어가서 인증을 위한 access_token을 보내줘야 한다.

access_token을 갖고 api에 접근한다.

만약 json안에 access_token이 존재 하면 access api를 가져오는 코드를
짜 준다. 그리고 만약 없다면 로그인페이지로 이동시키고 오류메시지를 뛰운다.

export const finishGithubLogin = async (req, res) => {
  const baseUrl = "https://github.com/login/oauth/access_token";
  const config = {
    client_id: process.env.GH_CLIENT,
    client_secret: process.env.GH_SECRET,
    code: req.query.code,
  };
  const params = new URLSearchParams(config).toString();
  const finalUrl = `${baseUrl}?${params}`;
  const tokenRequest = await (
    await fetch(finalUrl, {
      method: "POST",
      headers: {
        Accept: "application/json",
      },
    })
  ).json();
  if ("access_token" in tokenRequest) {
    const { access_token } = tokenRequest;
    const userRequest = await (
      await fetch("https://api.github.com/user", {
        headers: {
          Autorization: `token ${access_token}`,
        },
      })
    ).json();
    console.log(userRequest);
  } else {
    return res.redirect("/login");
  }
};

로 코드를 수정

아직 email이 null로 못 받아온다. 이것을 설정해 주어야한다.

access_token은 scope에 적은 내용에 대해서만 허용해 준다.


Github REST API
https://docs.github.com/en/rest/reference/users

유저의 email을 받아온 것을 

  const emailData = await (
      await fetch(`${apiUrl}/user/emails`, {
        headers: {
          Autorization: `token ${access_token}`,
        },
      })
    ).json();
    console.log(emailData);
  } else {
    return res.redirect("/login");
  }

식으로 받아온다.


하지만 오류...왜일까..

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ


깃헙 아이디를 가지고 있는 사람은 우리에게 email을 제공한다.
받은 이메일과 우리의 데이터베이스에 있는 이메일이 같을 경우
그냥 로그인 시켜주는 식으로 코드를 구현해보자.

~~~여기서 부터는 모르겠다...
작동도 안하고,,,,

github 데이터는 avatarUrl이라는 것을 사용



ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ








