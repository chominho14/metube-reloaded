

이제 프론트엔드 작업을 할 것이다.

1. 홈페이지 꾸미기

2. VIDEO Player 만들기

3. video view 작업하기
비디오가 재생이 끝나면 백엔드로 데이터를 보내 조회수를 기록하게 만든다.

4. 댓글기능 넣기

5. 비디오 녹화기능
  비디오의 권한을 이용하는 것 연습하기.

 
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ


자바스크립트를 프론트엔드에 사용될 부분에 도달했다.

자체적인 비디오 플레이어 디자인을 만든다.

우리는 comments를 바닐라 javascript랑 API를 사용해서 실시간 코멘트 섹션을 만들 것이다.

우리가 지금까지 코드를 구현한 것들은 백엔드에서의 자바스크립트 코드들이다.

따라서 이제는 프론트엔드 자바스크립트 코드를 짜야된다.

그 전에 Webpack에 대하여 이해해야 한다.

우리가 전에 했던 Babel Node를 이용하여 자바스크립트가 이해할 수 있도록 변형시켰다.
이것을 이용하여 백엔드의 코드들을 자바스크립트가 이해할 수 있게 되었다.

이것을 프론트엔드 자바스크립트에서도 해야 한다.

스타일을 하기 위해선 css를 프론트엔드로 보내야 한다.
-> Sass 이용



ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ


Webpack
업계 표준이라 공부한다.
https://webpack.js.org/guides/

-> 모든파일을 받아서 .js.css.jpg.png로 바꿔준다.

실제로 실무에선 잘 사용하지 않는다.

웹팩이 이미 포함되어 있는 툴을 쓴다.

웹팩이 어떻게 일어나고 무슨일이 일어나는지 이해해야 하므로 공부한다.

Gulp 강의가 있다.
-> Webpack보다 쉬운 대채제 이다

webpack이 어렵고 힘들면 gulp를 찾아서 듣는 것도 방법이다.




Webpack Configuration 파일 작성.

웹팩 설치하기

npm i webpack webpack-cli --D

웹팩을 설정하기 위해서는 webpack.config.js라는 파일을 생성해야한다.

webpack.config.js파일 만들기
-> 이 파일은 오래된 javascript 코드만 이해할 수 있다.

웹팩에서 이해해야 할 것

1. Entry : 우리가 처리하고자 하는 파일들(소스코드)
	변경하고자 하는 파일

2. output : 결과물

3. filename: 이 프로퍼티에 우리 결과물이 될 파일 이름 입력

4. path: 이 프로퍼티에 우리 결과물 파일을 어디에 저장할 지 지정 
	(이 경로는 절대경로여야 해!)


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

webpack.config.js파일에서 작업한다.

module.exports = {
  entry: "./src/client/js/main.js",
  output: {
    filename: "main.js",
    path: "./assets/js",
  },
};


package.json에서 스크립트를 추가한다.

  "assets" : "webpack --config webpack.config.js",


웹팩의 Path는 절대경로를 원한다.

const path = require("path");

module.exports = {
  entry: "./src/client/js/main.js",
  output: {
    filename: "main.js",
    path: path.resolve(__dirname, "assets", "js"),
  },
};


로 완성한다.
__dirname은 디렉토리의 절대 경로를 보여준다.


babel-loader을 설치한다.
npm install -D babel-loader


코드작성

const path = require("path");

module.exports = {
  entry: "./src/client/js/main.js",
  mode: "development",
  output: {
    filename: "main.js",
    path: path.resolve(__dirname, "assets", "js"),
  },
  module: {
    rules: [
      {
        test: /\.js$/,
        use: {
          loader: "babel-loader",
          options: {
            presets: [["@babel/preset-env", { targets: "defaults" }]],
          },
        },
      },
    ],
  },
};

개발 도중에는 mode: "developments",로 해 둔다.































