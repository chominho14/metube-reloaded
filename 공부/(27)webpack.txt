

이제 프론트엔드 작업을 할 것이다.

1. 홈페이지 꾸미기

2. VIDEO Player 만들기

3. video view 작업하기
비디오가 재생이 끝나면 백엔드로 데이터를 보내 조회수를 기록하게 만든다.

4. 댓글기능 넣기

5. 비디오 녹화기능
  비디오의 권한을 이용하는 것 연습하기.

 
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ


자바스크립트를 프론트엔드에 사용될 부분에 도달했다.

자체적인 비디오 플레이어 디자인을 만든다.

우리는 comments를 바닐라 javascript랑 API를 사용해서 실시간 코멘트 섹션을 만들 것이다.

우리가 지금까지 코드를 구현한 것들은 백엔드에서의 자바스크립트 코드들이다.

따라서 이제는 프론트엔드 자바스크립트 코드를 짜야된다.

그 전에 Webpack에 대하여 이해해야 한다.

우리가 전에 했던 Babel Node를 이용하여 자바스크립트가 이해할 수 있도록 변형시켰다.
이것을 이용하여 백엔드의 코드들을 자바스크립트가 이해할 수 있게 되었다.

이것을 프론트엔드 자바스크립트에서도 해야 한다.

스타일을 하기 위해선 css를 프론트엔드로 보내야 한다.
-> Sass 이용



ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ


Webpack
업계 표준이라 공부한다.
https://webpack.js.org/guides/

-> 모든파일을 받아서 .js.css.jpg.png로 바꿔준다.

실제로 실무에선 잘 사용하지 않는다.

웹팩이 이미 포함되어 있는 툴을 쓴다.

웹팩이 어떻게 일어나고 무슨일이 일어나는지 이해해야 하므로 공부한다.

Gulp 강의가 있다.
-> Webpack보다 쉬운 대채제 이다

webpack이 어렵고 힘들면 gulp를 찾아서 듣는 것도 방법이다.




Webpack Configuration 파일 작성.

웹팩 설치하기

npm i webpack webpack-cli --D

웹팩을 설정하기 위해서는 webpack.config.js라는 파일을 생성해야한다.

webpack.config.js파일 만들기
-> 이 파일은 오래된 javascript 코드만 이해할 수 있다.

웹팩에서 이해해야 할 것

1. Entry : 우리가 처리하고자 하는 파일들(소스코드)
	변경하고자 하는 파일

2. output : 결과물

3. filename: 이 프로퍼티에 우리 결과물이 될 파일 이름 입력

4. path: 이 프로퍼티에 우리 결과물 파일을 어디에 저장할 지 지정 
	(이 경로는 절대경로여야 해!)


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

webpack.config.js파일에서 작업한다.

module.exports = {
  entry: "./src/client/js/main.js",
  output: {
    filename: "main.js",
    path: "./assets/js",
  },
};


package.json에서 스크립트를 추가한다.

  "assets" : "webpack --config webpack.config.js",


웹팩의 Path는 절대경로를 원한다.

const path = require("path");

module.exports = {
  entry: "./src/client/js/main.js",
  output: {
    filename: "main.js",
    path: path.resolve(__dirname, "assets", "js"),
  },
};


로 완성한다.
__dirname은 디렉토리의 절대 경로를 보여준다.


babel-loader을 설치한다.
npm install -D babel-loader


코드작성

const path = require("path");

module.exports = {
  entry: "./src/client/js/main.js",
  mode: "development",
  output: {
    filename: "main.js",
    path: path.resolve(__dirname, "assets", "js"),
  },
  module: {
    rules: [
      {
        test: /\.js$/,
        use: {
          loader: "babel-loader",
          options: {
            presets: [["@babel/preset-env", { targets: "defaults" }]],
          },
        },
      },
    ],
  },
};

개발 도중에는 mode: "developments",로 해 둔다.



우리는 client 폴더에서 코딩할 것이다.

그 전에 우리는 Express한테 assets 안에 js안에 main.js가 있어야 한다고 알려야 한다.

이제 assets/js/main.js를 base.pug랑 연결시켜야 한다.


base.pug에 
script(src="/static/js/main.js")
를 작성하면 연결이 된다.

우리가 client/js/main.js에서 코딩을 하면 이것을 assets/js/main.js로 코드가 변환되고
그 후 base.pug가 실행될때 main.js를 불러서 실행된다.


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ



CSS


우리는 이제 client 안에 scss라는 폴더를 만들고 그 안에 styles.scss를 만들 것이다.

그리고 하나는 _variables.scss를 만든다.

scss에서는 변수를 만들어 사용할 수 있다.

ex)

_variables.scss파일에서 
$red: red;
로 선언하고

styles.scss에서
@import "./variables";

body {
  background-color: $red;
}
식으로 가져다 사용이 가능하다.


사용 방법은 이 scss파일을 main.js로 import해야 한다.

import "../scss/styles.scss";
로.
하지만 오류.
--> 파일을 처리하려면 loader가 있어야 한다.

우리는 모든 scss파일을 변환할 것이다.

그러려면 3가지의 loader가 필요하다.

1. scss를 가져다가 일반 css로 변형하는 것
--> sass-loader
npm i sass-loader sass webpack --save-dev

2. 폰트같은걸 불러올 때 css에 유용하게 쓰이는 것
--> css-loader
npm i --save-dev css-loader

3. 변환한 css를 웹사이트에 적용시킬 것
--> style-loader
npm i --save-dev style-loader

이 loader들을 어떻게 합치느냐.
마지막 loader부터 시작해야 한다.(역순)
-> 웹팩은 뒤부터 시작한다.

웹팩은 css파일을 따로 만들어 그것을 기존에 코드에 head에 적용시키고 있다.

css파일을 따로 만들어 보관하고 싶기에 MiniCssExtractPlugin을 사용한다.

-> 이것은 해당 코드를 다른 파일로 분리시키는 것이다.

npm install --save-dev mini-css-extract-plugin

문서만 따라가도 된다.
https://webpack.js.org/plugins/mini-css-extract-plugin/

https://nomadcoders.co/wetube/lectures/2759
에서 강의 들으며 따라가기.

그리고 
base.pug에
link(rel="stylesheet",href="/static/css/styles.css")
추가


한가지 더 추가하고 싶은 기능은
assets폴더가 자동으로 삭제되길 원한다. ( loader가 실행된 후 생성되는 폴더이기 때문 )

그리고 프론트엔드쪽 자바스크립트에서 변경할때마다 매번 npm run assets 한다는 것은 귀찮은 일이다.


방법은 
watch: true,
를 추가해 주는 것이다.( 웹팩.콘피그.js 에)

개발을 진행할때 터미널을 두 개 키고 하나는 서버 하나는 프론트엔드쪽 실시간 변화를 보는 것으로
진행한다.

하지만 우리는 프론트엔드 자바스크립트코드가 변경되나고 해서 백엔드가 다시 재시작되는 것을 원치 않는다.

--> nodemon을 조금 변경한다

그 전에 웹팩.config.js에서 output에
clean:true,
추가.
--> output folder를 빌드 시작전에 clean해주는 것이다.


변경 시 webpack.config.js가 실행되지 않게 무시해주는 작업은
nodemon에서 한다.
웹팩이 아니더라도 몇가지 파일이나 폴더를 무시하는 방법.

두가지 방식이 있다.

1. package.json 수정
명령문을 작성하거나, 설정파일을 하나 생성한다.

nodemon.json을 만들고 
거기에 
{
  "ignore": ["webpack.config.js", "src/client/*", "assets/*"],
  "exec": "babel-node src/init.js"
}


로 수정


assets폴더를 .gitignore파일에 꼭 추가한다.














