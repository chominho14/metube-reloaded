

Building the Backend

Heroku를 통해 배포한다.
-> 어떤 node.js환경에서도 서버가 실행될 수 있게 설정을 바꿔야 한다.

DB설정을 바꾼다.
현재 MongoDB는 local에서만 실행되고 있다. 이것을 우리 서버가 아닌 아마존에
올려야 한다.

우리의 코드를 production방법으로 빌드해야 되고, 코드를 압축(minify)해야한다.


실제 서버에서 백엔드를 실행하는 단계를 해보자.

1.
우리가 만든 코드를 실행하려면 바벨을 사용한다.
하지만 바벨을 사용하면 performance에 문제가 생긴다.

바벨은 빠르지 않다.
그래서 init.js를 일반적인 javascript로 바꿔야 한다.
babel CLI 사용.

https://babeljs.io/docs/en/babel-cli
npm install --save-dev @babel/core @babel/cli

그 다음 script를 만들자.
pakage.json에서!

"build:server": "babel src/init.js -d build",

-d : directory : 빌드한 코드를 어디에 저장할 지
그리고 npm run build:server로 실행

우리가 원하는 건 src폴더를 빌드하는 것이다. 따라서 수정.

"build:server": "babel src -d build",

문제는 코드를 빌드할때 client 부분도 빌드된다.
client는 빌드하면 안되고 웹팩은 하나만 해야한다.

스크립트에
    "start": "node build/init.js",

추가
-> nodemon은 babel-node src/init.js를 실행한다.
우리는 node build/init.js를 실행하고 싶다.

하지만 오류!
-> 코드가 async와 await을 사용할 수 있게 알려줘야 한다.

regeneratorRuntime에러
-> init.js에 import "regenerator-runtime";
추가해준다.

https://www.npmjs.com/package/regenerator-runtime


이렇게 설정해주면 babel로 실행되는 것이 아닌 node로 실행되게 된다.
-> babel의 도움없이 javascript를 실행한다는 말.

이제 local~4000으로 잘 되는지 확인한다.
views폴더에 build에 없다. 하지만 실행된다.
-> server.js때문에.
app.set("views",process.cwd() + ~)때문에.

이제 클라이언트 코드를 빌드할 것이다.
production을 만들 것이다. - 압축



ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

Building the Frontend

웹팩에는 두 가지가 있다.
1. development
2. production - 코드가 더 작다.

-> assets를 빌드하고 싶다.
"build": "npm run build:server && npm run build:assets",

"build:assets": "webpack --mode=production",
"dev:assets": "webpack --mode=development -w"

수정
webpack.config.js
13,14번째 줄 삭제
mode: "development",
watch: true,



ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ


Heroku
서버를 Heroku에 올릴 것이다.
서버의 배포를 도와준다.

https://www.heroku.com/

Heroku에 백엔드 서버를 업로드하는 방법에는 두 가지가 있다.

1. Github

2. Heroku Git

heroku git:remote -a metube-reloaded

heroku는 오직 git history만 본다.

.gitignore에 있는 것들은 업로드 되지 않는다.

파워쉘에서 내 프로젝트 위치로 이동해준다.
거기서 herocu push origin main 

하지만 이렇게 해도 mongoUrl로 오류.
-> .gitignore에 있어서이다.

mongoDB Atlas 계정만들기

MongoDB Atlas
https://www.mongodb.com/atlas/database

MongoDB 생성
1. 새로운 Project 생성
2. Cluster추가
(Atlas-DEPLOYMENT-Databases에서 Build a Database로 변경)
3. Shared클릭
4. Cloud Provider & Region 선택 (us-east-1)
5. Cluster Tier 선택 (Free)
6. Cluster 생성

.env에서 설정한 환경 변수를 heroku에 Config Vars에 추가

실제
https://metube-reloaded.herokuapp.com/users/github/finish

test
http://localhost:4000/users/github/finish

우리는 파일을 저장하기 위해서 aws를 사용할 것이다.
S3, IAM, 여기서 aws_id, aws_secret 을 .env, heroku에 넣기


이제 Multer S3 를 사용한다.

Multer S3 설치
AWS S3용 스트리밍 Multer 스토리지 엔진
npm i multer-s3
https://www.npmjs.com/package/multer-s3

AWS-SDK 설치
JavaScript용 AWS SDK
npm i aws-sdk
https://www.npmjs.com/package/aws-sdk


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

몇일 동안 해결하지 못했던 문제.

aws에 올라간 데이터를 heroku에서 받아오는데 제대로 받아오지 못해 계속 사진과 영상이 깨졌다.

이것을 해결한 방법.
구글링과 유튜브.

우선 aws에서 가져온 url이 region을 포함하지 않은 url이라는 것을 인지하였다.

이것을 해결하기 위해 

const s3 = new aws.S3({
  credentials: {
    accessKeyId: process.env.AWS_ID,
    secretAccessKey: process.env.AWS_SECRET,
    region: process.env.AWS_REGION,
  },
});

로 region을 추가하고 heroku - settings - config vars에서 
AWS_REGION 에 key와 value를 추가해준다.

이 과정으로 aws에 파일이 저장될 때 알맞은 url로 저장되었다.( 이 과정이 해결시간의 50% 차지 )

그리고 나서는 권한 문제가 발생.

1. 퍼블릭 액세스 차단에 모든 퍼블릭을 허용해 줬다.
2. 그 후 버킷 정책을 수정했다.
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "PublicReadForGetBucketObjects",
            "Effect": "Allow",
            "Principal": "*",
            "Action": "s3:GetObject",
            "Resource": "arn:aws:s3:::metubee/*"
        }
    ]
}
로 추가.