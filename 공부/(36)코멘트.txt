

Comments

지금까지 했던 것들을 모두 활용해서 만든다.

comment models

Schemas 정의

https://mongoosejs.com/docs/guide.html

1.
스키마 만들기 - 모델에 Comment.js를 만들어 작업한다.

import mongoose from "mongoose";

const commentSchema = new mongoose.Schema({
  text: { type: String.toString, required: true },
  owner: { type: mongoose.Schema.Types.ObjectId, required: true, ref: "User" },
  video: { type: mongoose.Schema.Types.ObjectId, required: true, ref: "Video" },
  createdAt: { type: Date, required: true, default: Date.now },
});

const Comment = mongoose.model("Comment", commentSchema);

export default Comment;


2.
User.js와 Video.js에 
  comments: [{ types: mongoose.Schema.Types.ObjectId, ref: "Comment" }],

comments: [
    { type: mongoose.Schema.Types.ObjectId, required: true, ref: "Comment" },
  ],

를 추가해 주기.


3.
init.js에 import하기

4.
js폴더 안에 
commentSection.js를 만들어 작업한다.
-> 웹팩에 넣어 웹팩한테 이 파일이 존재하는 지에 대해 알려준다.


5. commentSection를 사용할 템플릿에서 불러와 사용한다.
-> watch.pug에서.

    div.video__comments
        form.video__comment-form#commentForm 
            textarea(cols="30", rows="10", placeholder="Write a nice comment...")
            button Add Comment


6. 이제 자바스크립트 작업을 해준다.
-> element를 다루자.
--> commentSection.js에서


7. 백엔드에 request를 보낸다.

서버에서 app.use(express.text());
를 추가해 줘서 백엔드로 보낼 수 있게 만든다.

우리가 만약 여러개의 object를 보내고 싶을때는 text를 보내면서 {}로 같이 보내게 되는데
이것을 캐치하기 위해서 JSON.stringify를 사용한다.
object를 string으로 바꿔주기 위해

그러기 위해선 express.text() 로는 안된다.
express 에는 string을 josn으로 바꿔즌 ㄴ것이 있다.
express.json()

const handleSubmit = event => {
  // 작업을 잠시 멈춰준다.
  event.preventDefault();
  const textarea = form.querySelector("textarea");
  const text = textarea.value;
  const videoId = videoContainer.dataset.id;
  if (text === "") {
    return;
  }
  fetch(`/api/videos/${videoId}/comment`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ text }),
  });
};

이렇게 작업한다.

어떠한 작업을 만들 때 순서는
1. json으로 정보를 보내고 frontend에 도착하면
2. 그 response를 받아서 status를 검사하고
3. await를 써서 json으로 메시지를 추출한다.


































