

데이터 타입은 많은 일을 할 수 있다.
type, required, trim, minLength, maxLength 등등


이제 video 생성하는 건 다 했다.

홈페이지를 조금 바꿔보자.

mixin.pug
mixin video(video)
    div 
        h4 
            a(href=`/videos/${video.id}`)=video.title
        p=video.description
        small=video.createdAt
        hr
로 수정.


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

우리는 비디오를 받아오는데 처음에 설정해둔 video라우터에서 보면
url을 정규표현식으로 숫자만 받아오게 만들엇다

하지만 우리의 mongoose에서 자동으로 생성해주는 video의 id는 숫자만 존재하지 않는다.
그래서 오류가 뜬다.

수정해주자.

방법 1 : 비디오라우터에서 정규표현식부분을 없앤다.
	그러면 watch가 실행된다.

	문제는 upload video에 들어가도 watch컨트롤러가 실행된다.

--> upload를 맨 위로 올려주어 해결한다.


방법 2 : documentation 방법

documentation에서 mongodb의 id에 대해 조사해서 이걸로
정규식을 만드는 방법.

mongodb의 id 는 24자(byte)의 hax(16진수) string으로 이루어져잇다.
정규표현식 코드짜기
https://www.regexpal.com/
에서 
24자가 0부터 9 그리고 a부터 f와 맞는지 확인
[0-9a-f]{24}


그래도 아직 타입에러가 뜬다.
해결해 보자.

watch를 따라가서 확인한다. 
watch.pug를 가서 확인해보면 template은 video.views를 찾고 있다.
하지만 video는 현재 view가 없다.
그리고 view의 property를 못 부르고 있다.

해결하기 위해 코드를 삭제하고

    p=video.description
    small=video.createdAt

바꿔준다.

그리고

비디오 컨트롤러에서 수정해준다.
우리는 model.fintById() 와 findOne()을 사용할 것이다.

findOne()은 내가 보내는 모든 condition을 적용시켜준다.

watch에서 
  const video = await Video.findById(id);
를 추가해 준다.

이제 watch template에 video를 전송해준다.

title을 마무리 해야한다.
watching 대신 video의 title을 전송해주는 걸로 수정.


기억해야 할 것!!!
id는 req.params에서 온다!!!
이 코드가 express를 시켜서 url을 인식하도록 만들었기 때문에.

정규식 연습할 수 있는 사이트
https://regex101.com/

정규식 공식 문서
https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Regular_Expressions


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

documentation을 보면 exec(execute)라는 것이 있다.

이 부분이 query를 실행하는 부분이다.
--> mongoose 내부적으로 작동하는 것은
 내가 execute를 호출하면 promise가 return된다.


이제 처리해야할 것은.
존재하지 않는 video페이지를 방문했을 때 어떻게 처리하냐이다.

미리 확인하는 방법이 있다.
if문을 이용.

  const video = await Video.findById(id);
  if (video) {
    return res.render("watch", { pageTitle: video.title, video });
  }
  return res.render("404", { pageTitle: "Video not fountd." });
};



getEdit도 watchfunction이랑 비슷하다.

니꼬가 많이 사용하는 패턴
에러를 먼저 처리한다.
export const getEdit = async (req, res) => {
  const { id } = req.params;
  const video = await Video.findById(id);
  if (!video) {
    return res.render("404", { pageTitle: "Video not found." });
  }
  return res.render("edit", { pageTitle: `Editing` });
};

식으로! ( if문 안에 return해주는 것이 중요하다! )

edit.pug에 upload.pug에서 작업한 것을 붙여 넣어 준다.

input(placeholder="Description", required, type="text", name="description", minlength=20)
input(placeholder="Hashtags, separated by coma.", required, type="text", name="hashtags")
        
다만 edit.pug에선
input(placeholder="Description", required, type="text", name="description", minlength=20,value=video.description)
input(placeholder="Hashtags, separated by coma.", required, type="text", name="hashtags",value=video.hashtags)

value 도 추가해 준다.

하지만 hashtags에는 오류가 생긴다 array다 보니깐 그대로 보여지게 된다.

hashtags를 format해 준다.
--> array처럼 보이지 않고 string처럼 보이게

join() 이용

input(placeholder="Hashtags, separated by coma.", required, type="text", name="hashtags",value=video.hashtags.join())










































