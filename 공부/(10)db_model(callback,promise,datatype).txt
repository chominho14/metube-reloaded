외부 데이터베이스와 연동하는 방법!!!!

그럼이제 본격적으로 어떻게 video model을 사용하는가>

controllers 파일을 수정해 준다.

ex) videoControllers.js

우선 video를 import 해준다.
import Video from "../models/Video";

그 후 database와 연결해 주어야 한다.
mongoose documentation을 보면 된다.
https://mongoosejs.com/docs/queries.html

Video.find()에는 두 가지 사용법이 있다.
우리는 데이터가 전송되는 것을 기다려야 한다.(우리가 받는데이터가
	javascript파일 속에 없어서!)
따라서 두 가지 방법으로 사용한다.

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ


1. callback function을 활용하는 방법.

쉽게 설명하면 callback은 무엇인가가 발생하고 난 다음 호출되는
function을 말한다.
예를들면, liten() 와 같이. 
-->즉, 기다림을 표현하는 방법.

callback을 사용하려면 configuration이랑 호출할 function이
필요하다.

configuration.
***중괄호는 serch terms를 나타낸다.
serch terms가 비어있으면 모든 형식을 찾는다는 것을 의미한다.

function.
callback은 err와 docs라는 signature를 갖는다.

  Video.find({}, (error, videos) => {});

로 사용.

-->에러가 뜰 것이다. 이유는 render home은 videos array가
필요하기 때문.

리턴 값에
 return res.render("home", { pageTitle: "Home", videos :[]});
로 array를 추가해 준다.

callback을 사용하면 아무것도 return 되지 않아야 한다.
이것을 예로 확인해 보면
에러와 비디오를 출력하는 함수보다 아래에 코드 console.log를 넣어도
실행결과 console창을 확인해 보면 아래에 넣어준 코드 실행이
먼저 실행 되는 것을 볼 수 있다.

과정을 풀어보면
console을 출력하고, render과정을 거쳐 logger을 얻는다.
그 후 우리가 요청해서 받은 response 과정 이후 error와 
videos array가 실행된다.

-->이것을 이용하면 특정 함수를 마지막에 출력할 수 있다

이러한 특징을 이용해서 코드 수정
 Video.find({}, (error, videos) => {
    return res.render("home", { pageTitle: "Home", videos });
  });

이렇게 고쳐주면 videos는 위 videos argument에서 온다.
그리고 브라우저는 해당 작업이 끝날때까지 기다려 준다.

database 검색이 끝나야 rendering이 시작되게 만들어 주는 것이다.


callback 의 장점은 에러들을 바로 볼 수 있다는 것이다.
하지만 이 방법은 function 안에 function을 넣어야 하는 번거로움이 있다.

callback을 활용해서 짠 코드

export const home = (req, res) => {
  console.log("Start");
  Video.find({}, (error, videos) => {
    if(error){
      return res.render("server-error");
    }
    return res.render("home", { pageTitle: "Home", videos });
  });
  console.log("i finished");
};


이것을 해결할 두 번째 방법. promise.
 

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ



2. promise를 활용하는 방법.( callback의 최신 버

export const home = async (req, res) => {
  console.log("start");
  const videos = await Video.find({});
  console.log("finished");
  console.log(videos);
  return res.render("home", { pageTitle: "Home", videos });
};
로 간결하게 적을 수 있다.

callback과의 차이점은 await를 find 앞에 적으면 find는 
우리가 callback을 필요로 하지 않는다는 걸 안다.

그래서 find는 찾아낸 비디오를 바로 출력해 준다. find operation의 결과값으로

그렇다면 에러들은 어떻게 처리가 될까?

에러를 출력해 주기 위해서 try catch문을 사용해 준다.

코드로 적용시켜 보면

export const home = async (req, res) => {
  try {
    console.log("start");
    const videos = await Video.find({});
    console.log("finished");
    console.log(videos);
    return res.render("home", { pageTitle: "Home", videos });
  } catch {
    return res.render("server-error");
  }
};

로 사용할 수 있다.

혹시라도 오류 메시지를 추가하고 싶은 경우에는 
catch (error) {
    return res.render("server-error", { error });
  }
로 추가가 가능하다.


async await이 대단한 이유는 await가 database를 기다려 주기 때문이다.


정리해보면 
자바스크립트는 위에서 아래로 코드를 읽어가며 실행한다.
멈추는 기능이 없으므로 우리는 callback을 사용해서 특정 동작을 하게 해
이 동작이 끝나면 원래의 동작을 실행하도록 하였다.
하지만 await가 나타나면서 자바스크립트를 기다리게 만들어 줄 수 있게 되었다.
(database에서 정보를 받아오 ㄹ때까지)

--> 가독성도 좋고 기능도 좋고 모든 부분에서 좋다.

코딩 규칙상 await는 function 안에서만 사용이 가능하다.
function은 async가 적혀 있어야 한다.


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

render한 것은 다시 render할 수 없다(오류뜬다.)
render함수들 ( redirect, sendStatus 등등)

return을 이용해서 render을 하는 이유는 
function이 render 작업 후에 종료되도록 하기 위해서 이다.

--> return은 필수가 아니고 필요한 function만 불러주면 된다.


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
template 수정.


이제 upload video를 배울 것이다.


Video.js에서

schema는 비디오의 형태를 정의해 준다.
영상의 구성요소와 데이터 형태를 보여준다.
(생성일이나 meta데이터는 사용자에게 자동으로 제공)

비디오 업로드 하는 사람은
title, description, hashtags만 올려주면 된다.

upload.pug에서 
        input(placeholder="Title", required, type="text", name="title")
        input(placeholder="Description", required, type="text", name="description")
        input(placeholder="Hashtags, separated by coma.", required, type="text", name="hashtags")
추가


videoController.js에서 postUpload에서 discription, hashtags추가



ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ


비디오를 어떻게 만들까?

document를 만들어 주어야 한다.

  const video = new Video({
    title,
    description,
    createAt: Date.now(),
    hashtags: hashtags.split(",").map((word) => `#${word}`),
    meta: {
      views: 0,
      rating: 0,
    },
  });
이 코드를 만들어 video model의 구성요소들을 담아준다.

array는 담을때 split을 이용해서 잘라서 담아준다.
해쉬태그를 , 를 통해 담으라고 했으므로 ,로 쪼개준다.
후에 맵함수를 이용해서 #를 붙여준다.

하지만 이 작업으로는 데이터베이스에 저장이 되지 않는다.

우리가 models을 만들어 Video.js에서
타입을 하나하나 입력해줌으로써 컨트롤러에서 숫자나 다른 입력값을 넣어도
처음에 설정해준 데이터 타입으로 변환해 넣어준다.

video.save();로 정보를 데이터베이스에 저장해 준다.

save 는 promise를 return해준다.
->save작업이 끝날때까지 기다려야 한다
따라서 async await을 적용시켜야 한다.

코드를 완성시켜 보면

export const postUpload = async (req, res) => {
  const { title, description, hashtags } = req.body;
  const video = new Video({
    title,
    description,
    createAt: Date.now(),
    hashtags: hashtags.split(",").map((word) => `#${word}`),
    meta: {
      views: 0,
      rating: 0,
    },
  });
  await video.save();
  return res.redirect("/");
};


로 된다.

이렇게 되면 upload하게 되면 데이터가 저장되고

video.find는 우리의 video들을 불러준다.

이제 powershell에서  mongo 실행 후 show dbs로 데이터베이스를 보고
use wetube를 한 뒤 show collections를 하면 document를 확인할 수 있다.


위의 방법은 javscript object를 만들고 그 object를 database에 저장하는 방법.

다른 방법은

export const postUpload = async (req, res) => {
  const { title, description, hashtags } = req.body;
  await Video.create({
    title,
    description,
    createAt: Date.now(),
    hashtags: hashtags.split(",").map((word) => `#${word}`),
    meta: {
      views: 0,
      rating: 0,
    },
  });
  return res.redirect("/");
};

로 await 과 create를 이용하는 방식이다.

이 방식은 javascript object를 만들어 주는 과정을 우리가 안해도 된다.
코드가 자동으로 해준다.

하지만 이 과정에서는 error가 발생할 수 있으므로 try와 catch를 사용한다.

( validation 에러 : 컨트롤러에서 데이터타입을 잘 못 입력했을 시 
	데이터가 없는 경우엔 에러가 안 뜬다. 데이터가 비어있을 뿐
	--> required를 사용하지 않아서 .)

--> model을 구성하는 video.js에서
 createdAt: { type: Date, required: true },
로 바꿔주면 해결된다.

await에서 에러가 생기면 다 날아간다.(아무것도 실행되지 않는다.)
우리는 그것ㅇㄹ 막기위해 try, catch를 사용한다.


이제 포스트업로드를 완성해보면

export const postUpload = async (req, res) => {
  const { title, description, hashtags } = req.body;
  try {
    await Video.create({
      title,
      description,
      createAt: Date.now(),
      hashtags: hashtags.split(",").map((word) => `#${word}`),
      meta: {
        views: 0,
        rating: 0,
      },
    });
    return res.redirect("/");
  } catch (error) {
    console.log(error);
    return res.render("upload", { pageTitle: "Upload Video" });
  }
};
로 에러가 발생햇을 시 upload페이지를 랜더링하게 만들어 준다.

이렇게 에러가 발생했을 시에 유저한테 메시지를 보내주는 방법이 가장 이상적이다.

 방법 1 : 에러 메시지 보내주기
	컨트롤러 함수에서

      errorMessage: error._message,
	
	upload.pug파일에서

	    if errorMessage 
        span=errorMessage 

	추가


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

또다른 에러 처리.

createdAt에서 매번 required로 확인해 주어야 하는것은 끔찍하다
또한 Date.now()를 설정하는 것은 귀찮다

그래서 우린 createAt에 default값을 설정해줄 것이다.

  createdAt: { type: Date, required: true, default: Date.now },
로 적는다
mongoose는 똑똑해서 Date.now()로 안 적어도 인식한다.
Date.now()로 안 적는 이유는 바로 실행시키고 싶지 않아서이다.
( 우리가 video를 생성했을 시에만 실행 )

또 meta를 코딩한 부분은 별로이다 이것을 고쳐보자. 또 다른 
스키마 들을 사용하기 편하게 바꿔보자

video.js에서 
const videoSchema = new mongoose.Schema({
  title: { type: String, required: true },
  description: { type: String, required: true },
  createdAt: { type: Date, required: true, default: Date.now },
  hashtags: [{ type: String }],
  meta: {
    views: { type: Number, default: 0, required: true },
    rating: { type: Number, default: 0, required: true },
  },
});
로 바꿔주고

컨트롤러에서 meta를 없애준다.


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

schema를 사이트에서 보면 맣은 특징이 있는데
https://mongoosejs.com/docs/schematypes.html#strings


string 특징에서
lowercase , uppercase 등등 toLowercase,,, 좋은게 많다.

uppercase는 대문자로 바꿔준다.
trim 은 양쪽에 있는 빈 공간들을 없애준다.

모든 string에 trim을 넣어 코드를 확실히 다듬는다.

모델링 중
video.js에서 데이터에 대한 구체적인 설정을 하는 것은 매우매우매우 중요하다!!!!

처음에 설정할 때 구체적으로 하기!!!!!!!!

match는 정규표현식을 추가하는 걸 도와준다.
minLength, maxLength도 유용하다.

--> pug파일에서 min과 max를 설정해 브라우저에서 글자수 제한을 걸 수 있다.

그렇다면 form에서도 제한할 수 있는 걸 굳이 왜 데이터베이스 데이터 타입을 적용시킬때
도 걸어주어야 할까???

--> 답은 둘 다 해야한다.
1. 사용자를 위해서! 
2. 홈페이지가 해킹당했을 때 코드가 삭제될 수 있다.(form에서 코드된 min,max)
그래서 데이터베이스에서도 글자수 제한을 같이 걸어야 한다.


이제 hashtags를 다듬어 보자.
수정할때 문제가 될 수 있다.
그때는 새로운 hashtags의 string데이터를 받게 되는데 그 때 코드가 한 번 더 실행되어야 한다.

나중에 수정에 가서 코드를 바꿔보자.

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ


















