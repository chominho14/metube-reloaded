외부 데이터베이스와 연동하는 방법!!!!

그럼이제 본격적으로 어떻게 video model을 사용하는가>

controllers 파일을 수정해 준다.

ex) videoControllers.js

우선 video를 import 해준다.
import Video from "../models/Video";

그 후 database와 연결해 주어야 한다.
mongoose documentation을 보면 된다.
https://mongoosejs.com/docs/queries.html

Video.find()에는 두 가지 사용법이 있다.
우리는 데이터가 전송되는 것을 기다려야 한다.(우리가 받는데이터가
	javascript파일 속에 없어서!)
따라서 두 가지 방법으로 사용한다.

1. callback function을 활용하는 방법.
쉽게 설명하면 callback은 무엇인가가 발생하고 난 다음 호출되는
function을 말한다.
예를들면, liten() 와 같이. 
-->즉, 기다림을 표현하는 방법.

callback을 사용하려면 configuration이랑 호출할 function이
필요하다.

configuration.
***중괄호는 serch terms를 나타낸다.
serch terms가 비어있으면 모든 형식을 찾는다는 것을 의미한다.

function.
callback은 err와 docs라는 signature를 갖는다.

  Video.find({}, (error, videos) => {});

로 사용.

-->에러가 뜰 것이다. 이유는 render home은 videos array가
필요하기 때문.

리턴 값에
 return res.render("home", { pageTitle: "Home", videos :[]});
로 array를 추가해 준다.

callback을 사용하면 아무것도 return 되지 않아야 한다.
이것을 예로 확인해 보면
에러와 비디오를 출력하는 함수보다 아래에 코드 console.log를 넣어도
실행결과 console창을 확인해 보면 아래에 넣어준 코드 실행이
먼저 실행 되는 것을 볼 수 있다.

과정을 풀어보면
console을 출력하고, render과정을 거쳐 logger을 얻는다.
그 후 우리가 요청해서 받은 response 과정 이후 error와 
videos array가 실행된다.

-->이것을 이용하면 특정 함수를 마지막에 출력할 수 있다

이러한 특징을 이용해서 코드 수정
 Video.find({}, (error, videos) => {
    return res.render("home", { pageTitle: "Home", videos });
  });

이렇게 고쳐주면 videos는 위 videos argument에서 온다.
그리고 브라우저는 해당 작업이 끝날때까지 기다려 준다.

database 검색이 끝나야 rendering이 시작되게 만들어 주는 것이다.


하지만 이 방법은 function 안에 function을 넣어야 하는 번거로움이 있다.

이것을 해결할 두 번째 방법.




2. promise를 활용하는 방법.






















