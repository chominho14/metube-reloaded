

지금까지 배운 것들을 활용하고, 거기에 추가로 인증(Authentication)도
추가로 배울 것이다.


model폴더 안에 User.js파일을 만들어 user의 데이터 타입들을
정리해 준다.

import mongoose from "mongoose";

const userSchema = new mongoose.Schema({
  email: { type: String, required: true, unique: true },
  username: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  name: { type: String, required: true },
  location: String,
})


const User = mongoose.Model('User', userSchema);

export default User;

그리고 init.js에서 import 한다.


이제 탬플릿을 만들어 보자.

globalRouter을 rootRouter로 바꿔준다.
server.js에서 바꿔주기

join.pug 만들어서 작업해주기

extends base

block content 
    form(method="POST")
        input(placeholder="Name",name="name", type="text", required)
        input(placeholder="Email",name="email", type="email", required)
        input(placeholder="Username",name="username", type="text", required)
        input(placeholder="Password",name="password", type="password", required)
        input(placeholder="Location",name="location", type="text", required)
        input(type="submit", value="Join")

로 탬플릿을 만든다.

후에 유저 컨트롤러를 작업해준다.

getJoin, postJoin 을 이용해 유저를 만드렁 준다.

import User from "../models/User";

export const getJoin = (req, res) =>
  res.render("join", { pageTitle: "Create Account" });

export const postJoin = async (req, res) => {
  console.log(req.body);
  const { name, username, email, password, location } = req.body;
  await User.create({
    name,
    username,
    email,
    password,
    location,
  });
  return res.redirect("/login");
};


mongo 실행 후 
use metube
show collections
db.users.find() 로 확인 가능하다.

우리는 이제 패스워드에 암호화를 해줘야 한다.

우리는 유저가 입력한 password가 뭔지 몰라도 password가 일치하는지
안하는지 알 수 있다.

패스워드를 hash(해시화) 할 거다.

해싱은 일방향 함수인데, 문자열이 필요하다.

--> 입력값으로 출력이 될 수는 있는데 출력값을 통해 입력값을 알 수는 없다.
입력값이 같으면 항상 같은 출력값을 갖는다.
--> 컴퓨터과학에서 deterministic function(결정적함수)
라고 한다.

우리는 이것을 bcrypt를 이용해서 만들 것이다.

npm install --save bcryptjs


우리는 유저를 저장하기 전에 해싱할 것이다.

전에 영상에서 pre("save") 참고.

유저.js파일에
userSchema.pre("save", async function () {
  this.password = await bcryptjs.hash(this.password, 5);
});
추가.

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ



이제 유저가 로그인하고 싶을 때 어떻게 패스워드 일치 여부를 확인하는지 알아보자.

이미 유저네임과 이름이 있는 정보를 가지고 가입하게 되면, 계정생성이 안 된다.
--> 계속 로딩상태. = 에러(중복된 키)

직접 에러가 발생햇는지 체크해 주어야 한다.
--> 에러메시지

에러가 발생하면 DB에 저장하기 전에 그걸 catch할 것이다.

  const usernameExists = await User.exists({ username });
  if (usernameExists) {
    return res.render("join", {
      paheTitle: "join",
      errorMessage: "This username is already taken",
    });
  }

위와 똑같이 emailExists도 만들어 준다.

, 

탬플릿 만들어 주기.

에러메시지를 각각 다른 것으로 만들면 이렇게 만드는 게 좋을 수도 있다.

하지만 중복적으로 만들고 싶지 않으면 $or operator을 사용할 수 있다.

https://docs.mongodb.com/manual/reference/operator/query/or/#mongodb-query-op.-or

여러 조건에 하나만 해당되어도 찾아주는 역활을 한다.

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

이제 패스워드 확인하는 것을 만들 것이다.

탬플릿에 input을 하나 더 만들어 주고

컨트롤러에서 추가해 준다.

  if (password !== password2) {
    return res.render("join", {
      pageTitle,
      errorMessage: "Password confirmation dose not match",
    });
  }


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

브라우저에서는 저장하게 되면 저장해줄 거냐고 물어본다.

우리가 입력한 값은 틀렸는데 말이다.

이것을 해결해 주기 위해서 

status code(상태코드) 라는 것을 알 필요가 있다.

틀린 정보로 join을 눌러보면 콘솔창에 Post/ join 200 ~~이라고
뜰 것이다.

이 200은 OK라는 명령어이다. 그러므로 우리는 이것을 200으로 안 뜨게 
만들어 줘야 한다.

200이 뜨는 이유는 res.render로 보내서이다.
그래서 우리는 render는 잘 됐는데 에러가 있었다고 알려주어야 한다.

400이 Bad Request로 클라이언트에서 발생한 에러 때문에 요청을 
처리하지 못할 때 쓰게 된다.

이것을 하는 방법은

res.render() 사이에 status(400)을 추가하면 된다.

return res.status(400).render("join", {
      pageTitle,
      errorMessage: "Password confirmation dose not match",
    });

식으로

User.create을 안전하게 try catch로 묶어 주는 것이 좋다.

  try {
    await User.create({
      name,
      username,
      email,
      password,
      location,
    });
    return res.redirect("/login");
  } catch (error) {
    return res.status(400).render("join", {
      pageTitle: "Create User",
      errorMessage: error._message,
    });
  }



ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

이제 계정을 성공적으로 생성했으면 로그인을 해야 한다.


이제 로그인 페이지를 만들자.

이제 유저컨트롤러에서 login 부분을 
getLogin, postLogin으로 나누어 주고

루트라우터에서 import 해 준다.

join.pug 를 만들고 작업해 준다.

유저컨트롤러의 getLogin, postLogin 부분을 코딩한다.

export const getLogin = (req, res) =>
  res.render("login", { pageTitle: "Login" });

export const postLogin = async (req, res) => {
  const { username, password } = req.body;
  const exists = await User.exists({ username });
  if (!exists) {
    return res.status(400).render("login", {
      pageTitle: "Login",
      errorMessage: "An account with this username does not exists",
    });
  }
  res.end();
};


다시 정리하자면
우리가 하고 잇는 post는 중요하다.
get부분은 단순히 페이지만 render하고 있지만 우리가 데이터를 다루고 에러 처리, 유효성 체크
등은 모두 post에서 맡아서 하고 있기 때문이다.


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

이제 우리는 패스워드가 일치하는지 체크해야 한다.

해싱되어있는 패스워드라 어떻게 일치하게 만드는지 궁금했을 것이다.

원리.
아이디 = 해싱된 아이디
우리가 찾은 아이디 = 해싱된 아이디2
해싱된 아이디와 해싱된 아이디2 를 비교해서 일치하면 ok


https://en.wikipedia.org/wiki/Bcrypt

compare(유저가 입력한 패스워드, DB에 있는hash)을 이용한다.

우선 유저가 로그인하려는 계정이 무엇인지 알아야 한다.

exists부분과 유사하므로 user하나로 합친다.
exists -> findOne으로 대체 가능..?

  const ok = await bcryptjs.compare(password, user.password);
  if (!ok) {
    return res.status(400).render("login", {
      pageTitle,
      errorMessage: "Wrong password",
    });
  }
  res.end();
};

다음은 실제 유저를 로그인 시켜야 한다.

이것을 하기 위해선 세션을 알아야 한다.


유저를 기억하게 할 것이다.

세션 : 백엔드와 브라우저 간에 어떤 활동을 했는지 기억하는 것.

우리는 유저가 로그인 할 때마다 유저한테 뭔가를 줄 것이다.
(text)

express-session 미들웨어를 사용할 것이다.

npm i express-session

서버에서 import 해준다.

이 미들웨어를 router앞에 초기화 해주면 된다.

app.use(
  session({
    secret: "Hello!",
    resave: true,
    saveUninitialized: true,
  })
);

app.use((req, res, next) => {
  req.sessionStore.all((error, sessions) => {
    console.log(session);
    next();
  });
});

콘솔에 나타늘 것을 2가지 추가한다.

1. resave
2. saveUninitialized

이것으로 우리는 쿠키값을 받을 수 있다.

서버를 다시 시작하면 세션이 사라지는데
--> express가 세션을 메모리에 저장하고 있기 때문이다.

나중에는 백엔드가 세션을 잊지 않도록 mongoDB와 연결할 것이다.

세션은 서버측에서 제공해주는 데이터, 쿠키는 클라이언트측에서 저장하고 사용하는 데이터
req.sessiontStore() 사용했을때 한번은 undefined가 나온 이유가 세션은 서버에서 만들어줘야 하는데 클라이언트가 첫 요청때 세션을 가지고있을리 없으니 undefined이 나온거고 그 이후 요청부턴 첫번째 요청때 세션을 만들어서 넘겨줬으니 클라이언트가 해당 값을 쿠키에 저장하고 매 요청때마다 서버에게 전달
세션은 서버가 만들어서 제공해주다보니 서버가 재부팅되면 초기화 된다. (그래서 DB에 저장해서 관리를 한다는 소리. 실 운영에선 서버가 꺼지는 일은 없으니깐.)
세션의 값은 서버가 만들어주는 고유값이다보니 해당 값을 기준으로 클라이언트에서 요청한 건에 대해 유저를 특정지을 수 있다

서버가 세션을 생성한 기점은 middleware로 express-session을 추가했을때부터 생성됨.

















