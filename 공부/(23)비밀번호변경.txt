

edit-profile.pug에서 
a(href="change-password")를 추가

절대경로로 하는 것이 아닌 상대 경로로 이동한다.
이유는 url에서 users다음 부분만 바꿔주기 때문이다.
절대 경로로 바꾸면 4000다음부터 바뀌기 때문이다.

절대경로로 바꾸려면 
a(href="/users/change-password")
로 하면 된다.

이제 유저컨트롤러에서 

export const getChangePassword = (req, res) => {
  return res.render("users/change-password", { pageTitle: "Change Password" });
};
export const postChangePassword = (req, res) => {
  // send notification
  return res.redirect("/");
};

작업을 하면 된다.
그리고 pug파일을 만들어 준다.(change-password.pug)

extends ../base


block content
    form(method="post")
        input(placeholder="Old Password", type="password", name="oldPassword")
        input(placeholder="New Password", type="password", name="newPassword")
        input(placeholder="New Password Confirmation", type="password", name="newPasswordConfirmation")
        input(value="Change Password", type="submit")

여기서 우리는 users폴더를 만들어 그 안에 change-password.pug파일을 만들었기 때문에
extends ../base로 코딩해 주어야 인식한다.

여기서 문제가 있다.
깃허브를 통해 계정을 만든 경우에는 비밀번호 변경을 볼 수 없어야 한다.

이 작업은 두 가지 방식으로 할 수 있다.

1. userController의 getChangePassword에서 로그인된 사용자의 정보를 확인하는 방법

  if (req.session.user.sotialOnly === true) {
    return res.redirect("/");
  }

2. form을 볼 수는 있지만, 사용할 수 없게 만드는 방식
비밀번호가 있어야만 변경가능하게 만들기.

edit-profile.pug파일에서

        if !loggedInUser.socialOnly
            hr
            a(href="change-password") Change Password &rarr;
로 작업

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ


미들웨어에서 추가작업을 진행한다.

깃허브로 로그인하면 무언가를 보여주지 않거나 보여주는 middleware만들기


이제 change-password.pug의 form들에 이름을 붙여주고 postChangePassword작업을 진행한다.

export const postChangePassword = async(req, res) => {
  const {
    session: {
      user: { _id },
    },
    body: { oldPassword, newPassword, newPasswordConfirmation },
  } = req;

작업1.

 우선 새 비밀번호와 비밀번호 확인이 같은지 확인해야한다.

  if (newPassword !== newPasswordConfirmation) {
    return res.status(400).render("users/change-password", {
      pageTitle: "Change Password",
      errorMessage: "The password does not match the confirmation.",
    });
  }

로 작업 가능

틀린 비밀번호를 사용해도 브라우저는 저장할까?라고 물어본다.
그것을 막기위해 status(400)을 추가해 준다.

작업 2.
	기존 비밀번호가 정확한지 확인하기.

  const ok = await bcryptjs.compare(oldPassword, password);
  if (!ok) {
    return res.status(400).render("users/change-password", {
      pageTitle: "Change Password",
      errorMessage: "The current password is incorrect",
    });
  }

bcrypt를 이용하면 된다.

작업3.
 
	그리고 이제 비밀번호를 변경한다.

약간의 문제가 있다.
User.js에서 비밀번호를 저장한다. 비밀번호를 보내고 저장하면 hash해 준다.
user.save()를 사용한다.

사용하려면 session에서 로그인된 user 를 찾아야 한다.

  const user = await User.findById(_id);
  user.password = newPassword;

  await user.save();

로 가능하다.

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

 사용자가 비밀번호를 바꾸면 로그아웃 시키자.

























